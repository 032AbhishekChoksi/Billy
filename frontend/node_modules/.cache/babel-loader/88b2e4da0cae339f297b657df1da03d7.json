{"ast":null,"code":"import { All_RESTAURANT_REQUEST, All_RESTAURANT_SUCCESS, All_RESTAURANT_FAIL, LOGIN_REQUEST, LOGIN_SUCCESS, LOGIN_FAIL, UPDATE_PASSWORD_REQUEST, UPDATE_PASSWORD_SUCCESS, UPDATE_PASSWORD_FAIL, UPDATE_PASSWORD_RESET, FORGOT_PASSWORD_REQUEST, FORGOT_PASSWORD_SUCCESS, FORGOT_PASSWORD_FAIL, RESET_PASSWORD_REQUEST, RESET_PASSWORD_SUCCESS, RESET_PASSWORD_FAIL, CLEAR_ERRORS } from '../constants/restaurantConstants';\nimport axios from \"axios\";\nexport const getrestaurant = () => async dispatch => {\n  try {\n    dispatch({\n      type: All_RESTAURANT_REQUEST\n    });\n    const token = \"bearer \" + (await sessionStorage.getItem(\"x-auth-token\"));\n    axios.defaults.headers.common[\"Authorization\"] = token;\n    const {\n      data\n    } = await axios.get(`http://localhost:4000/api/restaurant?page=1&pageSize=10`, '', ''); // console.table(JSON.stringify(data))\n    // return alert(JSON.stringify(data));\n\n    dispatch({\n      type: All_RESTAURANT_SUCCESS,\n      payload: data.data\n    });\n  } catch (error) {\n    dispatch({\n      type: All_RESTAURANT_FAIL,\n      payload: error.response.data.message\n    });\n  }\n};\nexport const restaurantlogin = (ownerEmailID, ownerPassword) => async dispatch => {\n  try {\n    dispatch({\n      type: LOGIN_REQUEST\n    });\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const {\n      data\n    } = await axios.post('http://localhost:4000/api/restaurant/login', {\n      ownerEmailID,\n      ownerPassword\n    }, config); // alert(JSON.stringify(data))\n\n    if (data.data.message === \"Invalid Email ID\") {\n      dispatch({\n        type: LOGIN_FAIL,\n        payload: \"Invalid Email Id\"\n      });\n    } else {\n      if (data.data.message === \"The status is deactive\") {\n        dispatch({\n          type: LOGIN_FAIL,\n          payload: \"Your Account is Deactive\"\n        });\n      } else {\n        if (data.data.message === \"Invalid Password\") {\n          dispatch({\n            type: LOGIN_FAIL,\n            payload: \"Invalid Password\"\n          });\n        } else {\n          sessionStorage.setItem(\"restaurant\", JSON.stringify(data.data.restaurant));\n          sessionStorage.setItem(\"x-auth-token\", data.data.token);\n          dispatch({\n            type: LOGIN_SUCCESS,\n            payload: data.data\n          });\n        }\n      }\n    }\n  } catch (error) {\n    dispatch({\n      type: LOGIN_FAIL,\n      payload: error.response.data.message\n    });\n  }\n}; // Update Password\n\nexport const updatePassword = (restaurantId, ownerPassword, newpassword, confirmPassword) => async dispatch => {\n  try {\n    dispatch({\n      type: UPDATE_PASSWORD_REQUEST\n    });\n    const formData = new FormData();\n    formData.append('restaurantId', restaurantId);\n    formData.append('ownerPassword', ownerPassword);\n    formData.append('newpassword', newpassword);\n    formData.append('confirmPassword', confirmPassword);\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const token = \"bearer \" + (await sessionStorage.getItem(\"x-auth-token\"));\n    axios.defaults.headers.common[\"Authorization\"] = token;\n    const {\n      data\n    } = await axios.post(`http://localhost:4000/api/changePassword`, formData, config); // return alert(JSON.stringify(data))\n\n    dispatch({\n      type: UPDATE_PASSWORD_SUCCESS,\n      payload: data.message\n    });\n  } catch (error) {\n    dispatch({\n      type: UPDATE_PASSWORD_FAIL,\n      payload: error.response.data.message\n    });\n  }\n}; // Forgot Password\n\nexport const forgotPassword = formData => async dispatch => {\n  try {\n    dispatch({\n      type: FORGOT_PASSWORD_REQUEST\n    });\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const {\n      data\n    } = await axios.post(`http://localhost:4000/api/restaurant/forgotpassword/forgotPassword/forgotpassword`, formData, config); // return alert(JSON.stringify(data))\n\n    dispatch({\n      type: FORGOT_PASSWORD_SUCCESS,\n      payload: data.data.message\n    });\n  } catch (error) {\n    dispatch({\n      type: FORGOT_PASSWORD_FAIL,\n      payload: error.response.data.message\n    });\n  }\n}; // Reset Password\n\nexport const resetPassword = formData => async dispatch => {\n  try {\n    dispatch({\n      type: RESET_PASSWORD_REQUEST\n    });\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const {\n      data\n    } = await axios.post(`http://localhost:4000/api/restaurant/password/reset`, formData, config); // return alert(JSON.stringify(data.message))\n\n    dispatch({\n      type: RESET_PASSWORD_SUCCESS,\n      payload: data.message\n    });\n  } catch (error) {\n    dispatch({\n      type: RESET_PASSWORD_FAIL,\n      payload: error.response.data.message\n    });\n  }\n}; // Clearing Errors\n\nexport const clearErrors = () => async dispatch => {\n  dispatch({\n    type: CLEAR_ERRORS\n  });\n};","map":{"version":3,"names":["All_RESTAURANT_REQUEST","All_RESTAURANT_SUCCESS","All_RESTAURANT_FAIL","LOGIN_REQUEST","LOGIN_SUCCESS","LOGIN_FAIL","UPDATE_PASSWORD_REQUEST","UPDATE_PASSWORD_SUCCESS","UPDATE_PASSWORD_FAIL","UPDATE_PASSWORD_RESET","FORGOT_PASSWORD_REQUEST","FORGOT_PASSWORD_SUCCESS","FORGOT_PASSWORD_FAIL","RESET_PASSWORD_REQUEST","RESET_PASSWORD_SUCCESS","RESET_PASSWORD_FAIL","CLEAR_ERRORS","axios","getrestaurant","dispatch","type","token","sessionStorage","getItem","defaults","headers","common","data","get","payload","error","response","message","restaurantlogin","ownerEmailID","ownerPassword","config","post","setItem","JSON","stringify","restaurant","updatePassword","restaurantId","newpassword","confirmPassword","formData","FormData","append","forgotPassword","resetPassword","clearErrors"],"sources":["D:/sem7/Billy/frontend/src/actions/restaurantAction.js"],"sourcesContent":["import {\r\n    All_RESTAURANT_REQUEST,\r\n    All_RESTAURANT_SUCCESS,\r\n    All_RESTAURANT_FAIL,\r\n    LOGIN_REQUEST,\r\n    LOGIN_SUCCESS,\r\n    LOGIN_FAIL,\r\n    UPDATE_PASSWORD_REQUEST,\r\n    UPDATE_PASSWORD_SUCCESS,\r\n    UPDATE_PASSWORD_FAIL,\r\n    UPDATE_PASSWORD_RESET,\r\n    FORGOT_PASSWORD_REQUEST,\r\n    FORGOT_PASSWORD_SUCCESS,\r\n    FORGOT_PASSWORD_FAIL,\r\n    RESET_PASSWORD_REQUEST,\r\n    RESET_PASSWORD_SUCCESS,\r\n    RESET_PASSWORD_FAIL,\r\n    CLEAR_ERRORS\r\n} from '../constants/restaurantConstants'\r\nimport axios from \"axios\"\r\n\r\nexport const getrestaurant = () => async (dispatch) => {\r\n    try {\r\n      dispatch({ type: All_RESTAURANT_REQUEST })\r\n      const token = (\"bearer \" + await sessionStorage.getItem(\"x-auth-token\"));\r\n      axios.defaults.headers.common[\"Authorization\"] = token;\r\n      const { data } = await axios.get(`http://localhost:4000/api/restaurant?page=1&pageSize=10`, '', '');\r\n      // console.table(JSON.stringify(data))\r\n      // return alert(JSON.stringify(data));\r\n      dispatch({ type: All_RESTAURANT_SUCCESS, payload: data.data })\r\n  \r\n    } catch (error) {\r\n      dispatch({ type: All_RESTAURANT_FAIL, payload: error.response.data.message })\r\n    }\r\n  };\r\n\r\nexport const restaurantlogin = (ownerEmailID, ownerPassword) => async (dispatch) => {\r\n    try {\r\n        dispatch({ type: LOGIN_REQUEST });\r\n\r\n        const config = {\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        };\r\n        const { data } = await axios.post('http://localhost:4000/api/restaurant/login', {ownerEmailID,ownerPassword}, config);\r\n\r\n        // alert(JSON.stringify(data))\r\n        \r\n        if(data.data.message === \"Invalid Email ID\")\r\n        {\r\n            dispatch({ type: LOGIN_FAIL, payload: \"Invalid Email Id\"})\r\n        }else{\r\n          if(data.data.message === \"The status is deactive\"){\r\n            dispatch({ type: LOGIN_FAIL, payload: \"Your Account is Deactive\"})\r\n          }else{\r\n            if(data.data.message === \"Invalid Password\"){\r\n              dispatch({ type: LOGIN_FAIL, payload: \"Invalid Password\"})\r\n          }\r\n          else{\r\n              sessionStorage.setItem(\"restaurant\", JSON.stringify(data.data.restaurant));\r\n              sessionStorage.setItem(\"x-auth-token\", data.data.token);\r\n              dispatch({ type: LOGIN_SUCCESS, payload: data.data})\r\n          }\r\n          }\r\n        }\r\n\r\n        \r\n    } catch (error) {\r\n        dispatch({ type: LOGIN_FAIL, payload: error.response.data.message})\r\n    }\r\n};\r\n\r\n// Update Password\r\nexport const updatePassword = (restaurantId,ownerPassword,newpassword,confirmPassword) => async (dispatch) => {\r\n    try {\r\n      dispatch({ type: UPDATE_PASSWORD_REQUEST });\r\n\r\n      const formData = new FormData();\r\n        formData.append('restaurantId', restaurantId);\r\n        formData.append('ownerPassword', ownerPassword);\r\n        formData.append('newpassword', newpassword);\r\n        formData.append('confirmPassword', confirmPassword);\r\n\r\n      const config = {\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        }\r\n      };\r\n\r\n      const token = (\"bearer \" + await sessionStorage.getItem(\"x-auth-token\"));\r\n      axios.defaults.headers.common[\"Authorization\"] = token;\r\n      const { data } = await axios.post(`http://localhost:4000/api/changePassword`, formData, config);\r\n      // return alert(JSON.stringify(data))\r\n      dispatch({ type: UPDATE_PASSWORD_SUCCESS, payload: data.message });\r\n    } catch (error) {\r\n      dispatch({\r\n        type: UPDATE_PASSWORD_FAIL,\r\n        payload: error.response.data.message,\r\n      });\r\n    }\r\n  };\r\n\r\n// Forgot Password\r\nexport const forgotPassword = (formData) => async (dispatch) => {\r\n  try {\r\n    dispatch({ type: FORGOT_PASSWORD_REQUEST });\r\n\r\n    const config = {\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      }\r\n    };\r\n    const { data } = await axios.post(`http://localhost:4000/api/restaurant/forgotpassword/forgotPassword/forgotpassword`, formData, config);\r\n    // return alert(JSON.stringify(data))\r\n    dispatch({ type: FORGOT_PASSWORD_SUCCESS, payload: data.data.message });\r\n  } catch (error) {\r\n    dispatch({\r\n      type: FORGOT_PASSWORD_FAIL,\r\n      payload: error.response.data.message,\r\n    });\r\n  }\r\n};\r\n\r\n// Reset Password\r\nexport const resetPassword = (formData) => async (dispatch) => {\r\n  try {\r\n    dispatch({ type: RESET_PASSWORD_REQUEST });\r\n\r\n    const config = {\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      }\r\n    };\r\n    const { data } = await axios.post(`http://localhost:4000/api/restaurant/password/reset`, formData, config);\r\n    // return alert(JSON.stringify(data.message))\r\n    dispatch({ type: RESET_PASSWORD_SUCCESS, payload: data.message });\r\n  } catch (error) {\r\n    dispatch({\r\n      type: RESET_PASSWORD_FAIL,\r\n      payload: error.response.data.message,\r\n    });\r\n  }\r\n};\r\n\r\n// Clearing Errors\r\nexport const clearErrors = () => async (dispatch) => {\r\n  dispatch({ type: CLEAR_ERRORS });\r\n};"],"mappings":"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"},"metadata":{},"sourceType":"module"}