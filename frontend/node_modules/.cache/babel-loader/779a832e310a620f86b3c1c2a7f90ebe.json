{"ast":null,"code":"import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nconst _excluded = [\"element\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { unstable_useEnhancedEffect as useEnhancedEffect } from '@mui/material/utils';\n/** Credit: https://github.com/reach/reach-ui/blob/86a046f54d53b6420e392b3fa56dd991d9d4e458/packages/descendants/README.md\n *  Modified slightly to suit our purposes.\n */\n// To replace with .findIndex() once we stop IE11 support.\n\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction findIndex(array, comp) {\n  for (let i = 0; i < array.length; i += 1) {\n    if (comp(array[i])) {\n      return i;\n    }\n  }\n\n  return -1;\n}\n\nfunction binaryFindElement(array, element) {\n  let start = 0;\n  let end = array.length - 1;\n\n  while (start <= end) {\n    const middle = Math.floor((start + end) / 2);\n\n    if (array[middle].element === element) {\n      return middle;\n    } // eslint-disable-next-line no-bitwise\n\n\n    if (array[middle].element.compareDocumentPosition(element) & Node.DOCUMENT_POSITION_PRECEDING) {\n      end = middle - 1;\n    } else {\n      start = middle + 1;\n    }\n  }\n\n  return start;\n}\n\nconst DescendantContext = /*#__PURE__*/React.createContext({});\n\nif (process.env.NODE_ENV !== 'production') {\n  DescendantContext.displayName = 'DescendantContext';\n}\n\nfunction usePrevious(value) {\n  const ref = React.useRef(null);\n  React.useEffect(() => {\n    ref.current = value;\n  }, [value]);\n  return ref.current;\n}\n\nconst noop = () => {};\n/**\n * This hook registers our descendant by passing it into an array. We can then\n * search that array by to find its index when registering it in the component.\n * We use this for focus management, keyboard navigation, and typeahead\n * functionality for some components.\n *\n * The hook accepts the element node\n *\n * Our main goals with this are:\n *   1) maximum composability,\n *   2) minimal API friction\n *   3) SSR compatibility*\n *   4) concurrent safe\n *   5) index always up-to-date with the tree despite changes\n *   6) works with memoization of any component in the tree (hopefully)\n *\n * * As for SSR, the good news is that we don't actually need the index on the\n * server for most use-cases, as we are only using it to determine the order of\n * composed descendants for keyboard navigation.\n */\n\n\nexport function useDescendant(descendant) {\n  const [, forceUpdate] = React.useState();\n  const {\n    registerDescendant = noop,\n    unregisterDescendant = noop,\n    descendants = [],\n    parentId = null\n  } = React.useContext(DescendantContext); // This will initially return -1 because we haven't registered the descendant\n  // on the first render. After we register, this will then return the correct\n  // index on the following render and we will re-register descendants\n  // so that everything is up-to-date before the user interacts with a\n  // collection.\n\n  const index = findIndex(descendants, item => item.element === descendant.element);\n  const previousDescendants = usePrevious(descendants); // We also need to re-register descendants any time ANY of the other\n  // descendants have changed. My brain was melting when I wrote this and it\n  // feels a little off, but checking in render and using the result in the\n  // effect's dependency array works well enough.\n\n  const someDescendantsHaveChanged = descendants.some((newDescendant, position) => {\n    return previousDescendants && previousDescendants[position] && previousDescendants[position].element !== newDescendant.element;\n  }); // Prevent any flashing\n\n  useEnhancedEffect(() => {\n    if (descendant.element) {\n      registerDescendant(_extends({}, descendant, {\n        index\n      }));\n      return () => {\n        unregisterDescendant(descendant.element);\n      };\n    }\n\n    forceUpdate({});\n    return undefined;\n  }, [registerDescendant, unregisterDescendant, index, someDescendantsHaveChanged, descendant]);\n  return {\n    parentId,\n    index\n  };\n}\nexport function DescendantProvider(props) {\n  const {\n    children,\n    id\n  } = props;\n  const [items, set] = React.useState([]);\n  const registerDescendant = React.useCallback(_ref => {\n    let {\n      element\n    } = _ref,\n        other = _objectWithoutPropertiesLoose(_ref, _excluded);\n\n    set(oldItems => {\n      let newItems;\n\n      if (oldItems.length === 0) {\n        // If there are no items, register at index 0 and bail.\n        return [_extends({}, other, {\n          element,\n          index: 0\n        })];\n      }\n\n      const index = binaryFindElement(oldItems, element);\n\n      if (oldItems[index] && oldItems[index].element === element) {\n        // If the element is already registered, just use the same array\n        newItems = oldItems;\n      } else {\n        // When registering a descendant, we need to make sure we insert in\n        // into the array in the same order that it appears in the DOM. So as\n        // new descendants are added or maybe some are removed, we always know\n        // that the array is up-to-date and correct.\n        //\n        // So here we look at our registered descendants and see if the new\n        // element we are adding appears earlier than an existing descendant's\n        // DOM node via `node.compareDocumentPosition`. If it does, we insert\n        // the new element at this index. Because `registerDescendant` will be\n        // called in an effect every time the descendants state value changes,\n        // we should be sure that this index is accurate when descendent\n        // elements come or go from our component.\n        const newItem = _extends({}, other, {\n          element,\n          index\n        }); // If an index is not found we will push the element to the end.\n\n\n        newItems = oldItems.slice();\n        newItems.splice(index, 0, newItem);\n      }\n\n      newItems.forEach((item, position) => {\n        item.index = position;\n      });\n      return newItems;\n    });\n  }, []);\n  const unregisterDescendant = React.useCallback(element => {\n    set(oldItems => oldItems.filter(item => element !== item.element));\n  }, []);\n  const value = React.useMemo(() => ({\n    descendants: items,\n    registerDescendant,\n    unregisterDescendant,\n    parentId: id\n  }), [items, registerDescendant, unregisterDescendant, id]);\n  return /*#__PURE__*/_jsx(DescendantContext.Provider, {\n    value: value,\n    children: children\n  });\n}\nprocess.env.NODE_ENV !== \"production\" ? DescendantProvider.propTypes = {\n  children: PropTypes.node,\n  id: PropTypes.string\n} : void 0;","map":{"version":3,"names":["_objectWithoutPropertiesLoose","_extends","_excluded","React","PropTypes","unstable_useEnhancedEffect","useEnhancedEffect","jsx","_jsx","findIndex","array","comp","i","length","binaryFindElement","element","start","end","middle","Math","floor","compareDocumentPosition","Node","DOCUMENT_POSITION_PRECEDING","DescendantContext","createContext","process","env","NODE_ENV","displayName","usePrevious","value","ref","useRef","useEffect","current","noop","useDescendant","descendant","forceUpdate","useState","registerDescendant","unregisterDescendant","descendants","parentId","useContext","index","item","previousDescendants","someDescendantsHaveChanged","some","newDescendant","position","undefined","DescendantProvider","props","children","id","items","set","useCallback","_ref","other","oldItems","newItems","newItem","slice","splice","forEach","filter","useMemo","Provider","propTypes","node","string"],"sources":["D:/sem7/Billy/frontend/node_modules/@mui/lab/TreeView/descendants.js"],"sourcesContent":["import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nconst _excluded = [\"element\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { unstable_useEnhancedEffect as useEnhancedEffect } from '@mui/material/utils';\n\n/** Credit: https://github.com/reach/reach-ui/blob/86a046f54d53b6420e392b3fa56dd991d9d4e458/packages/descendants/README.md\n *  Modified slightly to suit our purposes.\n */\n\n// To replace with .findIndex() once we stop IE11 support.\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nfunction findIndex(array, comp) {\n  for (let i = 0; i < array.length; i += 1) {\n    if (comp(array[i])) {\n      return i;\n    }\n  }\n  return -1;\n}\nfunction binaryFindElement(array, element) {\n  let start = 0;\n  let end = array.length - 1;\n  while (start <= end) {\n    const middle = Math.floor((start + end) / 2);\n    if (array[middle].element === element) {\n      return middle;\n    }\n\n    // eslint-disable-next-line no-bitwise\n    if (array[middle].element.compareDocumentPosition(element) & Node.DOCUMENT_POSITION_PRECEDING) {\n      end = middle - 1;\n    } else {\n      start = middle + 1;\n    }\n  }\n  return start;\n}\nconst DescendantContext = /*#__PURE__*/React.createContext({});\nif (process.env.NODE_ENV !== 'production') {\n  DescendantContext.displayName = 'DescendantContext';\n}\nfunction usePrevious(value) {\n  const ref = React.useRef(null);\n  React.useEffect(() => {\n    ref.current = value;\n  }, [value]);\n  return ref.current;\n}\nconst noop = () => {};\n\n/**\n * This hook registers our descendant by passing it into an array. We can then\n * search that array by to find its index when registering it in the component.\n * We use this for focus management, keyboard navigation, and typeahead\n * functionality for some components.\n *\n * The hook accepts the element node\n *\n * Our main goals with this are:\n *   1) maximum composability,\n *   2) minimal API friction\n *   3) SSR compatibility*\n *   4) concurrent safe\n *   5) index always up-to-date with the tree despite changes\n *   6) works with memoization of any component in the tree (hopefully)\n *\n * * As for SSR, the good news is that we don't actually need the index on the\n * server for most use-cases, as we are only using it to determine the order of\n * composed descendants for keyboard navigation.\n */\nexport function useDescendant(descendant) {\n  const [, forceUpdate] = React.useState();\n  const {\n    registerDescendant = noop,\n    unregisterDescendant = noop,\n    descendants = [],\n    parentId = null\n  } = React.useContext(DescendantContext);\n\n  // This will initially return -1 because we haven't registered the descendant\n  // on the first render. After we register, this will then return the correct\n  // index on the following render and we will re-register descendants\n  // so that everything is up-to-date before the user interacts with a\n  // collection.\n  const index = findIndex(descendants, item => item.element === descendant.element);\n  const previousDescendants = usePrevious(descendants);\n\n  // We also need to re-register descendants any time ANY of the other\n  // descendants have changed. My brain was melting when I wrote this and it\n  // feels a little off, but checking in render and using the result in the\n  // effect's dependency array works well enough.\n  const someDescendantsHaveChanged = descendants.some((newDescendant, position) => {\n    return previousDescendants && previousDescendants[position] && previousDescendants[position].element !== newDescendant.element;\n  });\n\n  // Prevent any flashing\n  useEnhancedEffect(() => {\n    if (descendant.element) {\n      registerDescendant(_extends({}, descendant, {\n        index\n      }));\n      return () => {\n        unregisterDescendant(descendant.element);\n      };\n    }\n    forceUpdate({});\n    return undefined;\n  }, [registerDescendant, unregisterDescendant, index, someDescendantsHaveChanged, descendant]);\n  return {\n    parentId,\n    index\n  };\n}\nexport function DescendantProvider(props) {\n  const {\n    children,\n    id\n  } = props;\n  const [items, set] = React.useState([]);\n  const registerDescendant = React.useCallback(_ref => {\n    let {\n        element\n      } = _ref,\n      other = _objectWithoutPropertiesLoose(_ref, _excluded);\n    set(oldItems => {\n      let newItems;\n      if (oldItems.length === 0) {\n        // If there are no items, register at index 0 and bail.\n        return [_extends({}, other, {\n          element,\n          index: 0\n        })];\n      }\n      const index = binaryFindElement(oldItems, element);\n      if (oldItems[index] && oldItems[index].element === element) {\n        // If the element is already registered, just use the same array\n        newItems = oldItems;\n      } else {\n        // When registering a descendant, we need to make sure we insert in\n        // into the array in the same order that it appears in the DOM. So as\n        // new descendants are added or maybe some are removed, we always know\n        // that the array is up-to-date and correct.\n        //\n        // So here we look at our registered descendants and see if the new\n        // element we are adding appears earlier than an existing descendant's\n        // DOM node via `node.compareDocumentPosition`. If it does, we insert\n        // the new element at this index. Because `registerDescendant` will be\n        // called in an effect every time the descendants state value changes,\n        // we should be sure that this index is accurate when descendent\n        // elements come or go from our component.\n\n        const newItem = _extends({}, other, {\n          element,\n          index\n        });\n\n        // If an index is not found we will push the element to the end.\n        newItems = oldItems.slice();\n        newItems.splice(index, 0, newItem);\n      }\n      newItems.forEach((item, position) => {\n        item.index = position;\n      });\n      return newItems;\n    });\n  }, []);\n  const unregisterDescendant = React.useCallback(element => {\n    set(oldItems => oldItems.filter(item => element !== item.element));\n  }, []);\n  const value = React.useMemo(() => ({\n    descendants: items,\n    registerDescendant,\n    unregisterDescendant,\n    parentId: id\n  }), [items, registerDescendant, unregisterDescendant, id]);\n  return /*#__PURE__*/_jsx(DescendantContext.Provider, {\n    value: value,\n    children: children\n  });\n}\nprocess.env.NODE_ENV !== \"production\" ? DescendantProvider.propTypes = {\n  children: PropTypes.node,\n  id: PropTypes.string\n} : void 0;"],"mappings":"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"},"metadata":{},"sourceType":"module"}