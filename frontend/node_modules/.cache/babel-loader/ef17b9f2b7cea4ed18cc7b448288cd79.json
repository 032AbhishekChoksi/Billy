{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"children\", \"className\", \"defaultCollapseIcon\", \"defaultEndIcon\", \"defaultExpanded\", \"defaultExpandIcon\", \"defaultParentIcon\", \"defaultSelected\", \"disabledItemsFocusable\", \"disableSelection\", \"expanded\", \"id\", \"multiSelect\", \"onBlur\", \"onFocus\", \"onKeyDown\", \"onNodeFocus\", \"onNodeSelect\", \"onNodeToggle\", \"selected\"];\nimport * as React from 'react';\nimport clsx from 'clsx';\nimport PropTypes from 'prop-types';\nimport { styled, useTheme, useThemeProps } from '@mui/material/styles';\nimport { unstable_composeClasses as composeClasses } from '@mui/base';\nimport { useControlled, useForkRef, ownerDocument, unstable_useId as useId } from '@mui/material/utils';\nimport TreeViewContext from './TreeViewContext';\nimport { DescendantProvider } from './descendants';\nimport { getTreeViewUtilityClass } from './treeViewClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nconst useUtilityClasses = ownerState => {\n  const {\n    classes\n  } = ownerState;\n  const slots = {\n    root: ['root']\n  };\n  return composeClasses(slots, getTreeViewUtilityClass, classes);\n};\n\nconst TreeViewRoot = styled('ul', {\n  name: 'MuiTreeView',\n  slot: 'Root',\n  overridesResolver: (props, styles) => styles.root\n})({\n  padding: 0,\n  margin: 0,\n  listStyle: 'none',\n  outline: 0\n});\n\nfunction isPrintableCharacter(string) {\n  return string && string.length === 1 && string.match(/\\S/);\n}\n\nfunction findNextFirstChar(firstChars, startIndex, char) {\n  for (let i = startIndex; i < firstChars.length; i += 1) {\n    if (char === firstChars[i]) {\n      return i;\n    }\n  }\n\n  return -1;\n}\n\nfunction noopSelection() {\n  return false;\n}\n\nconst defaultDefaultExpanded = [];\nconst defaultDefaultSelected = [];\nconst TreeView = /*#__PURE__*/React.forwardRef(function TreeView(inProps, ref) {\n  const props = useThemeProps({\n    props: inProps,\n    name: 'MuiTreeView'\n  });\n\n  const {\n    children,\n    className,\n    defaultCollapseIcon,\n    defaultEndIcon,\n    defaultExpanded = defaultDefaultExpanded,\n    defaultExpandIcon,\n    defaultParentIcon,\n    defaultSelected = defaultDefaultSelected,\n    disabledItemsFocusable = false,\n    disableSelection = false,\n    expanded: expandedProp,\n    id: idProp,\n    multiSelect = false,\n    onBlur,\n    onFocus,\n    onKeyDown,\n    onNodeFocus,\n    onNodeSelect,\n    onNodeToggle,\n    selected: selectedProp\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  const theme = useTheme();\n  const isRtl = theme.direction === 'rtl';\n\n  const ownerState = _extends({}, props, {\n    defaultExpanded,\n    defaultSelected,\n    disabledItemsFocusable,\n    disableSelection,\n    multiSelect\n  });\n\n  const classes = useUtilityClasses(ownerState);\n  const treeId = useId(idProp);\n  const treeRef = React.useRef(null);\n  const handleRef = useForkRef(treeRef, ref);\n  const [focusedNodeId, setFocusedNodeId] = React.useState(null);\n  const nodeMap = React.useRef({});\n  const firstCharMap = React.useRef({});\n  const [expanded, setExpandedState] = useControlled({\n    controlled: expandedProp,\n    default: defaultExpanded,\n    name: 'TreeView',\n    state: 'expanded'\n  });\n  const [selected, setSelectedState] = useControlled({\n    controlled: selectedProp,\n    default: defaultSelected,\n    name: 'TreeView',\n    state: 'selected'\n  });\n  /*\n   * Status Helpers\n   */\n\n  const isExpanded = React.useCallback(id => Array.isArray(expanded) ? expanded.indexOf(id) !== -1 : false, [expanded]);\n  const isExpandable = React.useCallback(id => nodeMap.current[id] && nodeMap.current[id].expandable, []);\n  const isSelected = React.useCallback(id => Array.isArray(selected) ? selected.indexOf(id) !== -1 : selected === id, [selected]);\n  const isDisabled = React.useCallback(id => {\n    let node = nodeMap.current[id]; // This can be called before the node has been added to the node map.\n\n    if (!node) {\n      return false;\n    }\n\n    if (node.disabled) {\n      return true;\n    }\n\n    while (node.parentId != null) {\n      node = nodeMap.current[node.parentId];\n\n      if (node.disabled) {\n        return true;\n      }\n    }\n\n    return false;\n  }, []);\n\n  const isFocused = id => focusedNodeId === id;\n  /*\n   * Child Helpers\n   */\n  // Using Object.keys -> .map to mimic Object.values we should replace with Object.values() once we stop IE11 support.\n\n\n  const getChildrenIds = id => Object.keys(nodeMap.current).map(key => {\n    return nodeMap.current[key];\n  }).filter(node => node.parentId === id).sort((a, b) => a.index - b.index).map(child => child.id);\n\n  const getNavigableChildrenIds = id => {\n    let childrenIds = getChildrenIds(id);\n\n    if (!disabledItemsFocusable) {\n      childrenIds = childrenIds.filter(node => !isDisabled(node));\n    }\n\n    return childrenIds;\n  };\n  /*\n   * Node Helpers\n   */\n\n\n  const getNextNode = id => {\n    // If expanded get first child\n    if (isExpanded(id) && getNavigableChildrenIds(id).length > 0) {\n      return getNavigableChildrenIds(id)[0];\n    }\n\n    let node = nodeMap.current[id];\n\n    while (node != null) {\n      // Try to get next sibling\n      const siblings = getNavigableChildrenIds(node.parentId);\n      const nextSibling = siblings[siblings.indexOf(node.id) + 1];\n\n      if (nextSibling) {\n        return nextSibling;\n      } // If the sibling does not exist, go up a level to the parent and try again.\n\n\n      node = nodeMap.current[node.parentId];\n    }\n\n    return null;\n  };\n\n  const getPreviousNode = id => {\n    const node = nodeMap.current[id];\n    const siblings = getNavigableChildrenIds(node.parentId);\n    const nodeIndex = siblings.indexOf(id);\n\n    if (nodeIndex === 0) {\n      return node.parentId;\n    }\n\n    let currentNode = siblings[nodeIndex - 1];\n\n    while (isExpanded(currentNode) && getNavigableChildrenIds(currentNode).length > 0) {\n      currentNode = getNavigableChildrenIds(currentNode).pop();\n    }\n\n    return currentNode;\n  };\n\n  const getLastNode = () => {\n    let lastNode = getNavigableChildrenIds(null).pop();\n\n    while (isExpanded(lastNode)) {\n      lastNode = getNavigableChildrenIds(lastNode).pop();\n    }\n\n    return lastNode;\n  };\n\n  const getFirstNode = () => getNavigableChildrenIds(null)[0];\n\n  const getParent = id => nodeMap.current[id].parentId;\n  /**\n   * This is used to determine the start and end of a selection range so\n   * we can get the nodes between the two border nodes.\n   *\n   * It finds the nodes' common ancestor using\n   * a naive implementation of a lowest common ancestor algorithm\n   * (https://en.wikipedia.org/wiki/Lowest_common_ancestor).\n   * Then compares the ancestor's 2 children that are ancestors of nodeA and NodeB\n   * so we can compare their indexes to work out which node comes first in a depth first search.\n   * (https://en.wikipedia.org/wiki/Depth-first_search)\n   *\n   * Another way to put it is which node is shallower in a trÃ©maux tree\n   * https://en.wikipedia.org/wiki/Tr%C3%A9maux_tree\n   */\n\n\n  const findOrderInTremauxTree = (nodeAId, nodeBId) => {\n    if (nodeAId === nodeBId) {\n      return [nodeAId, nodeBId];\n    }\n\n    const nodeA = nodeMap.current[nodeAId];\n    const nodeB = nodeMap.current[nodeBId];\n\n    if (nodeA.parentId === nodeB.id || nodeB.parentId === nodeA.id) {\n      return nodeB.parentId === nodeA.id ? [nodeA.id, nodeB.id] : [nodeB.id, nodeA.id];\n    }\n\n    const aFamily = [nodeA.id];\n    const bFamily = [nodeB.id];\n    let aAncestor = nodeA.parentId;\n    let bAncestor = nodeB.parentId;\n    let aAncestorIsCommon = bFamily.indexOf(aAncestor) !== -1;\n    let bAncestorIsCommon = aFamily.indexOf(bAncestor) !== -1;\n    let continueA = true;\n    let continueB = true;\n\n    while (!bAncestorIsCommon && !aAncestorIsCommon) {\n      if (continueA) {\n        aFamily.push(aAncestor);\n        aAncestorIsCommon = bFamily.indexOf(aAncestor) !== -1;\n        continueA = aAncestor !== null;\n\n        if (!aAncestorIsCommon && continueA) {\n          aAncestor = nodeMap.current[aAncestor].parentId;\n        }\n      }\n\n      if (continueB && !aAncestorIsCommon) {\n        bFamily.push(bAncestor);\n        bAncestorIsCommon = aFamily.indexOf(bAncestor) !== -1;\n        continueB = bAncestor !== null;\n\n        if (!bAncestorIsCommon && continueB) {\n          bAncestor = nodeMap.current[bAncestor].parentId;\n        }\n      }\n    }\n\n    const commonAncestor = aAncestorIsCommon ? aAncestor : bAncestor;\n    const ancestorFamily = getChildrenIds(commonAncestor);\n    const aSide = aFamily[aFamily.indexOf(commonAncestor) - 1];\n    const bSide = bFamily[bFamily.indexOf(commonAncestor) - 1];\n    return ancestorFamily.indexOf(aSide) < ancestorFamily.indexOf(bSide) ? [nodeAId, nodeBId] : [nodeBId, nodeAId];\n  };\n\n  const getNodesInRange = (nodeA, nodeB) => {\n    const [first, last] = findOrderInTremauxTree(nodeA, nodeB);\n    const nodes = [first];\n    let current = first;\n\n    while (current !== last) {\n      current = getNextNode(current);\n      nodes.push(current);\n    }\n\n    return nodes;\n  };\n  /*\n   * Focus Helpers\n   */\n\n\n  const focus = (event, id) => {\n    if (id) {\n      setFocusedNodeId(id);\n\n      if (onNodeFocus) {\n        onNodeFocus(event, id);\n      }\n    }\n  };\n\n  const focusNextNode = (event, id) => focus(event, getNextNode(id));\n\n  const focusPreviousNode = (event, id) => focus(event, getPreviousNode(id));\n\n  const focusFirstNode = event => focus(event, getFirstNode());\n\n  const focusLastNode = event => focus(event, getLastNode());\n\n  const focusByFirstCharacter = (event, id, char) => {\n    let start;\n    let index;\n    const lowercaseChar = char.toLowerCase();\n    const firstCharIds = [];\n    const firstChars = []; // This really only works since the ids are strings\n\n    Object.keys(firstCharMap.current).forEach(nodeId => {\n      const firstChar = firstCharMap.current[nodeId];\n      const map = nodeMap.current[nodeId];\n      const visible = map.parentId ? isExpanded(map.parentId) : true;\n      const shouldBeSkipped = disabledItemsFocusable ? false : isDisabled(nodeId);\n\n      if (visible && !shouldBeSkipped) {\n        firstCharIds.push(nodeId);\n        firstChars.push(firstChar);\n      }\n    }); // Get start index for search based on position of currentItem\n\n    start = firstCharIds.indexOf(id) + 1;\n\n    if (start >= firstCharIds.length) {\n      start = 0;\n    } // Check remaining slots in the menu\n\n\n    index = findNextFirstChar(firstChars, start, lowercaseChar); // If not found in remaining slots, check from beginning\n\n    if (index === -1) {\n      index = findNextFirstChar(firstChars, 0, lowercaseChar);\n    } // If match was found...\n\n\n    if (index > -1) {\n      focus(event, firstCharIds[index]);\n    }\n  };\n  /*\n   * Expansion Helpers\n   */\n\n\n  const toggleExpansion = function (event) {\n    let value = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : focusedNodeId;\n    let newExpanded;\n\n    if (expanded.indexOf(value) !== -1) {\n      newExpanded = expanded.filter(id => id !== value);\n    } else {\n      newExpanded = [value].concat(expanded);\n    }\n\n    if (onNodeToggle) {\n      onNodeToggle(event, newExpanded);\n    }\n\n    setExpandedState(newExpanded);\n  };\n\n  const expandAllSiblings = (event, id) => {\n    const map = nodeMap.current[id];\n    const siblings = getChildrenIds(map.parentId);\n    const diff = siblings.filter(child => isExpandable(child) && !isExpanded(child));\n    const newExpanded = expanded.concat(diff);\n\n    if (diff.length > 0) {\n      setExpandedState(newExpanded);\n\n      if (onNodeToggle) {\n        onNodeToggle(event, newExpanded);\n      }\n    }\n  };\n  /*\n   * Selection Helpers\n   */\n\n\n  const lastSelectedNode = React.useRef(null);\n  const lastSelectionWasRange = React.useRef(false);\n  const currentRangeSelection = React.useRef([]);\n\n  const handleRangeArrowSelect = (event, nodes) => {\n    let base = selected.slice();\n    const {\n      start,\n      next,\n      current\n    } = nodes;\n\n    if (!next || !current) {\n      return;\n    }\n\n    if (currentRangeSelection.current.indexOf(current) === -1) {\n      currentRangeSelection.current = [];\n    }\n\n    if (lastSelectionWasRange.current) {\n      if (currentRangeSelection.current.indexOf(next) !== -1) {\n        base = base.filter(id => id === start || id !== current);\n        currentRangeSelection.current = currentRangeSelection.current.filter(id => id === start || id !== current);\n      } else {\n        base.push(next);\n        currentRangeSelection.current.push(next);\n      }\n    } else {\n      base.push(next);\n      currentRangeSelection.current.push(current, next);\n    }\n\n    if (onNodeSelect) {\n      onNodeSelect(event, base);\n    }\n\n    setSelectedState(base);\n  };\n\n  const handleRangeSelect = (event, nodes) => {\n    let base = selected.slice();\n    const {\n      start,\n      end\n    } = nodes; // If last selection was a range selection ignore nodes that were selected.\n\n    if (lastSelectionWasRange.current) {\n      base = base.filter(id => currentRangeSelection.current.indexOf(id) === -1);\n    }\n\n    let range = getNodesInRange(start, end);\n    range = range.filter(node => !isDisabled(node));\n    currentRangeSelection.current = range;\n    let newSelected = base.concat(range);\n    newSelected = newSelected.filter((id, i) => newSelected.indexOf(id) === i);\n\n    if (onNodeSelect) {\n      onNodeSelect(event, newSelected);\n    }\n\n    setSelectedState(newSelected);\n  };\n\n  const handleMultipleSelect = (event, value) => {\n    let newSelected;\n\n    if (selected.indexOf(value) !== -1) {\n      newSelected = selected.filter(id => id !== value);\n    } else {\n      newSelected = [value].concat(selected);\n    }\n\n    if (onNodeSelect) {\n      onNodeSelect(event, newSelected);\n    }\n\n    setSelectedState(newSelected);\n  };\n\n  const handleSingleSelect = (event, value) => {\n    const newSelected = multiSelect ? [value] : value;\n\n    if (onNodeSelect) {\n      onNodeSelect(event, newSelected);\n    }\n\n    setSelectedState(newSelected);\n  };\n\n  const selectNode = function (event, id) {\n    let multiple = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n    if (id) {\n      if (multiple) {\n        handleMultipleSelect(event, id);\n      } else {\n        handleSingleSelect(event, id);\n      }\n\n      lastSelectedNode.current = id;\n      lastSelectionWasRange.current = false;\n      currentRangeSelection.current = [];\n      return true;\n    }\n\n    return false;\n  };\n\n  const selectRange = function (event, nodes) {\n    let stacked = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    const {\n      start = lastSelectedNode.current,\n      end,\n      current\n    } = nodes;\n\n    if (stacked) {\n      handleRangeArrowSelect(event, {\n        start,\n        next: end,\n        current\n      });\n    } else if (start != null && end != null) {\n      handleRangeSelect(event, {\n        start,\n        end\n      });\n    }\n\n    lastSelectionWasRange.current = true;\n  };\n\n  const rangeSelectToFirst = (event, id) => {\n    if (!lastSelectedNode.current) {\n      lastSelectedNode.current = id;\n    }\n\n    const start = lastSelectionWasRange.current ? lastSelectedNode.current : id;\n    selectRange(event, {\n      start,\n      end: getFirstNode()\n    });\n  };\n\n  const rangeSelectToLast = (event, id) => {\n    if (!lastSelectedNode.current) {\n      lastSelectedNode.current = id;\n    }\n\n    const start = lastSelectionWasRange.current ? lastSelectedNode.current : id;\n    selectRange(event, {\n      start,\n      end: getLastNode()\n    });\n  };\n\n  const selectNextNode = (event, id) => {\n    if (!isDisabled(getNextNode(id))) {\n      selectRange(event, {\n        end: getNextNode(id),\n        current: id\n      }, true);\n    }\n  };\n\n  const selectPreviousNode = (event, id) => {\n    if (!isDisabled(getPreviousNode(id))) {\n      selectRange(event, {\n        end: getPreviousNode(id),\n        current: id\n      }, true);\n    }\n  };\n\n  const selectAllNodes = event => {\n    selectRange(event, {\n      start: getFirstNode(),\n      end: getLastNode()\n    });\n  };\n  /*\n   * Mapping Helpers\n   */\n\n\n  const registerNode = React.useCallback(node => {\n    const {\n      id,\n      index,\n      parentId,\n      expandable,\n      idAttribute,\n      disabled\n    } = node;\n    nodeMap.current[id] = {\n      id,\n      index,\n      parentId,\n      expandable,\n      idAttribute,\n      disabled\n    };\n  }, []);\n  const unregisterNode = React.useCallback(id => {\n    const newMap = _extends({}, nodeMap.current);\n\n    delete newMap[id];\n    nodeMap.current = newMap;\n    setFocusedNodeId(oldFocusedNodeId => {\n      if (oldFocusedNodeId === id && treeRef.current === ownerDocument(treeRef.current).activeElement) {\n        return getChildrenIds(null)[0];\n      }\n\n      return oldFocusedNodeId;\n    });\n  }, []);\n  const mapFirstChar = React.useCallback((id, firstChar) => {\n    firstCharMap.current[id] = firstChar;\n  }, []);\n  const unMapFirstChar = React.useCallback(id => {\n    const newMap = _extends({}, firstCharMap.current);\n\n    delete newMap[id];\n    firstCharMap.current = newMap;\n  }, []);\n  /**\n   * Event handlers and Navigation\n   */\n\n  const handleNextArrow = event => {\n    if (isExpandable(focusedNodeId)) {\n      if (isExpanded(focusedNodeId)) {\n        focusNextNode(event, focusedNodeId);\n      } else if (!isDisabled(focusedNodeId)) {\n        toggleExpansion(event);\n      }\n    }\n\n    return true;\n  };\n\n  const handlePreviousArrow = event => {\n    if (isExpanded(focusedNodeId) && !isDisabled(focusedNodeId)) {\n      toggleExpansion(event, focusedNodeId);\n      return true;\n    }\n\n    const parent = getParent(focusedNodeId);\n\n    if (parent) {\n      focus(event, parent);\n      return true;\n    }\n\n    return false;\n  };\n\n  const handleKeyDown = event => {\n    let flag = false;\n    const key = event.key; // If the tree is empty there will be no focused node\n\n    if (event.altKey || event.currentTarget !== event.target || !focusedNodeId) {\n      return;\n    }\n\n    const ctrlPressed = event.ctrlKey || event.metaKey;\n\n    switch (key) {\n      case ' ':\n        if (!disableSelection && !isDisabled(focusedNodeId)) {\n          if (multiSelect && event.shiftKey) {\n            selectRange(event, {\n              end: focusedNodeId\n            });\n            flag = true;\n          } else if (multiSelect) {\n            flag = selectNode(event, focusedNodeId, true);\n          } else {\n            flag = selectNode(event, focusedNodeId);\n          }\n        }\n\n        event.stopPropagation();\n        break;\n\n      case 'Enter':\n        if (!isDisabled(focusedNodeId)) {\n          if (isExpandable(focusedNodeId)) {\n            toggleExpansion(event);\n            flag = true;\n          } else if (multiSelect) {\n            flag = selectNode(event, focusedNodeId, true);\n          } else {\n            flag = selectNode(event, focusedNodeId);\n          }\n        }\n\n        event.stopPropagation();\n        break;\n\n      case 'ArrowDown':\n        if (multiSelect && event.shiftKey && !disableSelection) {\n          selectNextNode(event, focusedNodeId);\n        }\n\n        focusNextNode(event, focusedNodeId);\n        flag = true;\n        break;\n\n      case 'ArrowUp':\n        if (multiSelect && event.shiftKey && !disableSelection) {\n          selectPreviousNode(event, focusedNodeId);\n        }\n\n        focusPreviousNode(event, focusedNodeId);\n        flag = true;\n        break;\n\n      case 'ArrowRight':\n        if (isRtl) {\n          flag = handlePreviousArrow(event);\n        } else {\n          flag = handleNextArrow(event);\n        }\n\n        break;\n\n      case 'ArrowLeft':\n        if (isRtl) {\n          flag = handleNextArrow(event);\n        } else {\n          flag = handlePreviousArrow(event);\n        }\n\n        break;\n\n      case 'Home':\n        if (multiSelect && ctrlPressed && event.shiftKey && !disableSelection && !isDisabled(focusedNodeId)) {\n          rangeSelectToFirst(event, focusedNodeId);\n        }\n\n        focusFirstNode(event);\n        flag = true;\n        break;\n\n      case 'End':\n        if (multiSelect && ctrlPressed && event.shiftKey && !disableSelection && !isDisabled(focusedNodeId)) {\n          rangeSelectToLast(event, focusedNodeId);\n        }\n\n        focusLastNode(event);\n        flag = true;\n        break;\n\n      default:\n        if (key === '*') {\n          expandAllSiblings(event, focusedNodeId);\n          flag = true;\n        } else if (multiSelect && ctrlPressed && key.toLowerCase() === 'a' && !disableSelection) {\n          selectAllNodes(event);\n          flag = true;\n        } else if (!ctrlPressed && !event.shiftKey && isPrintableCharacter(key)) {\n          focusByFirstCharacter(event, focusedNodeId, key);\n          flag = true;\n        }\n\n    }\n\n    if (flag) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n\n    if (onKeyDown) {\n      onKeyDown(event);\n    }\n  };\n\n  const handleFocus = event => {\n    // if the event bubbled (which is React specific) we don't want to steal focus\n    if (event.target === event.currentTarget) {\n      const firstSelected = Array.isArray(selected) ? selected[0] : selected;\n      focus(event, firstSelected || getNavigableChildrenIds(null)[0]);\n    }\n\n    if (onFocus) {\n      onFocus(event);\n    }\n  };\n\n  const handleBlur = event => {\n    setFocusedNodeId(null);\n\n    if (onBlur) {\n      onBlur(event);\n    }\n  };\n\n  const activeDescendant = nodeMap.current[focusedNodeId] ? nodeMap.current[focusedNodeId].idAttribute : null;\n  return /*#__PURE__*/_jsx(TreeViewContext.Provider, {\n    // TODO: fix this lint error\n    // eslint-disable-next-line react/jsx-no-constructed-context-values\n    value: {\n      icons: {\n        defaultCollapseIcon,\n        defaultExpandIcon,\n        defaultParentIcon,\n        defaultEndIcon\n      },\n      focus,\n      toggleExpansion,\n      isExpanded,\n      isExpandable,\n      isFocused,\n      isSelected,\n      isDisabled,\n      selectNode: disableSelection ? noopSelection : selectNode,\n      selectRange: disableSelection ? noopSelection : selectRange,\n      multiSelect,\n      disabledItemsFocusable,\n      mapFirstChar,\n      unMapFirstChar,\n      registerNode,\n      unregisterNode,\n      treeId\n    },\n    children: /*#__PURE__*/_jsx(DescendantProvider, {\n      children: /*#__PURE__*/_jsx(TreeViewRoot, _extends({\n        role: \"tree\",\n        id: treeId,\n        \"aria-activedescendant\": activeDescendant,\n        \"aria-multiselectable\": multiSelect,\n        className: clsx(classes.root, className),\n        ref: handleRef,\n        tabIndex: 0,\n        onKeyDown: handleKeyDown,\n        onFocus: handleFocus,\n        onBlur: handleBlur,\n        ownerState: ownerState\n      }, other, {\n        children: children\n      }))\n    })\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? TreeView.propTypes\n/* remove-proptypes */\n= {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The default icon used to collapse the node.\n   */\n  defaultCollapseIcon: PropTypes.node,\n\n  /**\n   * The default icon displayed next to a end node. This is applied to all\n   * tree nodes and can be overridden by the TreeItem `icon` prop.\n   */\n  defaultEndIcon: PropTypes.node,\n\n  /**\n   * Expanded node ids. (Uncontrolled)\n   * @default []\n   */\n  defaultExpanded: PropTypes.arrayOf(PropTypes.string),\n\n  /**\n   * The default icon used to expand the node.\n   */\n  defaultExpandIcon: PropTypes.node,\n\n  /**\n   * The default icon displayed next to a parent node. This is applied to all\n   * parent nodes and can be overridden by the TreeItem `icon` prop.\n   */\n  defaultParentIcon: PropTypes.node,\n\n  /**\n   * Selected node ids. (Uncontrolled)\n   * When `multiSelect` is true this takes an array of strings; when false (default) a string.\n   * @default []\n   */\n  defaultSelected: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.string), PropTypes.string]),\n\n  /**\n   * If `true`, will allow focus on disabled items.\n   * @default false\n   */\n  disabledItemsFocusable: PropTypes.bool,\n\n  /**\n   * If `true` selection is disabled.\n   * @default false\n   */\n  disableSelection: PropTypes.bool,\n\n  /**\n   * Expanded node ids. (Controlled)\n   */\n  expanded: PropTypes.arrayOf(PropTypes.string),\n\n  /**\n   * This prop is used to help implement the accessibility logic.\n   * If you don't provide this prop. It falls back to a randomly generated id.\n   */\n  id: PropTypes.string,\n\n  /**\n   * If true `ctrl` and `shift` will trigger multiselect.\n   * @default false\n   */\n  multiSelect: PropTypes.bool,\n\n  /**\n   * @ignore\n   */\n  onBlur: PropTypes.func,\n\n  /**\n   * @ignore\n   */\n  onFocus: PropTypes.func,\n\n  /**\n   * @ignore\n   */\n  onKeyDown: PropTypes.func,\n\n  /**\n   * Callback fired when tree items are focused.\n   *\n   * @param {React.SyntheticEvent} event The event source of the callback **Warning**: This is a generic event not a focus event.\n   * @param {string} value of the focused node.\n   */\n  onNodeFocus: PropTypes.func,\n\n  /**\n   * Callback fired when tree items are selected/unselected.\n   *\n   * @param {React.SyntheticEvent} event The event source of the callback\n   * @param {string[] | string} nodeIds Ids of the selected nodes. When `multiSelect` is true\n   * this is an array of strings; when false (default) a string.\n   */\n  onNodeSelect: PropTypes.func,\n\n  /**\n   * Callback fired when tree items are expanded/collapsed.\n   *\n   * @param {React.SyntheticEvent} event The event source of the callback.\n   * @param {array} nodeIds The ids of the expanded nodes.\n   */\n  onNodeToggle: PropTypes.func,\n\n  /**\n   * Selected node ids. (Controlled)\n   * When `multiSelect` is true this takes an array of strings; when false (default) a string.\n   */\n  selected: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.string), PropTypes.string]),\n\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])\n} : void 0;\nexport default TreeView;","map":{"version":3,"names":["_extends","_objectWithoutPropertiesLoose","_excluded","React","clsx","PropTypes","styled","useTheme","useThemeProps","unstable_composeClasses","composeClasses","useControlled","useForkRef","ownerDocument","unstable_useId","useId","TreeViewContext","DescendantProvider","getTreeViewUtilityClass","jsx","_jsx","useUtilityClasses","ownerState","classes","slots","root","TreeViewRoot","name","slot","overridesResolver","props","styles","padding","margin","listStyle","outline","isPrintableCharacter","string","length","match","findNextFirstChar","firstChars","startIndex","char","i","noopSelection","defaultDefaultExpanded","defaultDefaultSelected","TreeView","forwardRef","inProps","ref","children","className","defaultCollapseIcon","defaultEndIcon","defaultExpanded","defaultExpandIcon","defaultParentIcon","defaultSelected","disabledItemsFocusable","disableSelection","expanded","expandedProp","id","idProp","multiSelect","onBlur","onFocus","onKeyDown","onNodeFocus","onNodeSelect","onNodeToggle","selected","selectedProp","other","theme","isRtl","direction","treeId","treeRef","useRef","handleRef","focusedNodeId","setFocusedNodeId","useState","nodeMap","firstCharMap","setExpandedState","controlled","default","state","setSelectedState","isExpanded","useCallback","Array","isArray","indexOf","isExpandable","current","expandable","isSelected","isDisabled","node","disabled","parentId","isFocused","getChildrenIds","Object","keys","map","key","filter","sort","a","b","index","child","getNavigableChildrenIds","childrenIds","getNextNode","siblings","nextSibling","getPreviousNode","nodeIndex","currentNode","pop","getLastNode","lastNode","getFirstNode","getParent","findOrderInTremauxTree","nodeAId","nodeBId","nodeA","nodeB","aFamily","bFamily","aAncestor","bAncestor","aAncestorIsCommon","bAncestorIsCommon","continueA","continueB","push","commonAncestor","ancestorFamily","aSide","bSide","getNodesInRange","first","last","nodes","focus","event","focusNextNode","focusPreviousNode","focusFirstNode","focusLastNode","focusByFirstCharacter","start","lowercaseChar","toLowerCase","firstCharIds","forEach","nodeId","firstChar","visible","shouldBeSkipped","toggleExpansion","value","newExpanded","concat","expandAllSiblings","diff","lastSelectedNode","lastSelectionWasRange","currentRangeSelection","handleRangeArrowSelect","base","slice","next","handleRangeSelect","end","range","newSelected","handleMultipleSelect","handleSingleSelect","selectNode","multiple","selectRange","stacked","rangeSelectToFirst","rangeSelectToLast","selectNextNode","selectPreviousNode","selectAllNodes","registerNode","idAttribute","unregisterNode","newMap","oldFocusedNodeId","activeElement","mapFirstChar","unMapFirstChar","handleNextArrow","handlePreviousArrow","parent","handleKeyDown","flag","altKey","currentTarget","target","ctrlPressed","ctrlKey","metaKey","shiftKey","stopPropagation","preventDefault","handleFocus","firstSelected","handleBlur","activeDescendant","Provider","icons","role","tabIndex","process","env","NODE_ENV","propTypes","object","arrayOf","oneOfType","bool","func","sx"],"sources":["D:/sem7/Billy/frontend/node_modules/@mui/lab/TreeView/TreeView.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"children\", \"className\", \"defaultCollapseIcon\", \"defaultEndIcon\", \"defaultExpanded\", \"defaultExpandIcon\", \"defaultParentIcon\", \"defaultSelected\", \"disabledItemsFocusable\", \"disableSelection\", \"expanded\", \"id\", \"multiSelect\", \"onBlur\", \"onFocus\", \"onKeyDown\", \"onNodeFocus\", \"onNodeSelect\", \"onNodeToggle\", \"selected\"];\nimport * as React from 'react';\nimport clsx from 'clsx';\nimport PropTypes from 'prop-types';\nimport { styled, useTheme, useThemeProps } from '@mui/material/styles';\nimport { unstable_composeClasses as composeClasses } from '@mui/base';\nimport { useControlled, useForkRef, ownerDocument, unstable_useId as useId } from '@mui/material/utils';\nimport TreeViewContext from './TreeViewContext';\nimport { DescendantProvider } from './descendants';\nimport { getTreeViewUtilityClass } from './treeViewClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    classes\n  } = ownerState;\n  const slots = {\n    root: ['root']\n  };\n  return composeClasses(slots, getTreeViewUtilityClass, classes);\n};\nconst TreeViewRoot = styled('ul', {\n  name: 'MuiTreeView',\n  slot: 'Root',\n  overridesResolver: (props, styles) => styles.root\n})({\n  padding: 0,\n  margin: 0,\n  listStyle: 'none',\n  outline: 0\n});\nfunction isPrintableCharacter(string) {\n  return string && string.length === 1 && string.match(/\\S/);\n}\nfunction findNextFirstChar(firstChars, startIndex, char) {\n  for (let i = startIndex; i < firstChars.length; i += 1) {\n    if (char === firstChars[i]) {\n      return i;\n    }\n  }\n  return -1;\n}\nfunction noopSelection() {\n  return false;\n}\nconst defaultDefaultExpanded = [];\nconst defaultDefaultSelected = [];\nconst TreeView = /*#__PURE__*/React.forwardRef(function TreeView(inProps, ref) {\n  const props = useThemeProps({\n    props: inProps,\n    name: 'MuiTreeView'\n  });\n  const {\n      children,\n      className,\n      defaultCollapseIcon,\n      defaultEndIcon,\n      defaultExpanded = defaultDefaultExpanded,\n      defaultExpandIcon,\n      defaultParentIcon,\n      defaultSelected = defaultDefaultSelected,\n      disabledItemsFocusable = false,\n      disableSelection = false,\n      expanded: expandedProp,\n      id: idProp,\n      multiSelect = false,\n      onBlur,\n      onFocus,\n      onKeyDown,\n      onNodeFocus,\n      onNodeSelect,\n      onNodeToggle,\n      selected: selectedProp\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  const theme = useTheme();\n  const isRtl = theme.direction === 'rtl';\n  const ownerState = _extends({}, props, {\n    defaultExpanded,\n    defaultSelected,\n    disabledItemsFocusable,\n    disableSelection,\n    multiSelect\n  });\n  const classes = useUtilityClasses(ownerState);\n  const treeId = useId(idProp);\n  const treeRef = React.useRef(null);\n  const handleRef = useForkRef(treeRef, ref);\n  const [focusedNodeId, setFocusedNodeId] = React.useState(null);\n  const nodeMap = React.useRef({});\n  const firstCharMap = React.useRef({});\n  const [expanded, setExpandedState] = useControlled({\n    controlled: expandedProp,\n    default: defaultExpanded,\n    name: 'TreeView',\n    state: 'expanded'\n  });\n  const [selected, setSelectedState] = useControlled({\n    controlled: selectedProp,\n    default: defaultSelected,\n    name: 'TreeView',\n    state: 'selected'\n  });\n\n  /*\n   * Status Helpers\n   */\n  const isExpanded = React.useCallback(id => Array.isArray(expanded) ? expanded.indexOf(id) !== -1 : false, [expanded]);\n  const isExpandable = React.useCallback(id => nodeMap.current[id] && nodeMap.current[id].expandable, []);\n  const isSelected = React.useCallback(id => Array.isArray(selected) ? selected.indexOf(id) !== -1 : selected === id, [selected]);\n  const isDisabled = React.useCallback(id => {\n    let node = nodeMap.current[id];\n\n    // This can be called before the node has been added to the node map.\n    if (!node) {\n      return false;\n    }\n    if (node.disabled) {\n      return true;\n    }\n    while (node.parentId != null) {\n      node = nodeMap.current[node.parentId];\n      if (node.disabled) {\n        return true;\n      }\n    }\n    return false;\n  }, []);\n  const isFocused = id => focusedNodeId === id;\n\n  /*\n   * Child Helpers\n   */\n\n  // Using Object.keys -> .map to mimic Object.values we should replace with Object.values() once we stop IE11 support.\n  const getChildrenIds = id => Object.keys(nodeMap.current).map(key => {\n    return nodeMap.current[key];\n  }).filter(node => node.parentId === id).sort((a, b) => a.index - b.index).map(child => child.id);\n  const getNavigableChildrenIds = id => {\n    let childrenIds = getChildrenIds(id);\n    if (!disabledItemsFocusable) {\n      childrenIds = childrenIds.filter(node => !isDisabled(node));\n    }\n    return childrenIds;\n  };\n\n  /*\n   * Node Helpers\n   */\n\n  const getNextNode = id => {\n    // If expanded get first child\n    if (isExpanded(id) && getNavigableChildrenIds(id).length > 0) {\n      return getNavigableChildrenIds(id)[0];\n    }\n    let node = nodeMap.current[id];\n    while (node != null) {\n      // Try to get next sibling\n      const siblings = getNavigableChildrenIds(node.parentId);\n      const nextSibling = siblings[siblings.indexOf(node.id) + 1];\n      if (nextSibling) {\n        return nextSibling;\n      }\n\n      // If the sibling does not exist, go up a level to the parent and try again.\n      node = nodeMap.current[node.parentId];\n    }\n    return null;\n  };\n  const getPreviousNode = id => {\n    const node = nodeMap.current[id];\n    const siblings = getNavigableChildrenIds(node.parentId);\n    const nodeIndex = siblings.indexOf(id);\n    if (nodeIndex === 0) {\n      return node.parentId;\n    }\n    let currentNode = siblings[nodeIndex - 1];\n    while (isExpanded(currentNode) && getNavigableChildrenIds(currentNode).length > 0) {\n      currentNode = getNavigableChildrenIds(currentNode).pop();\n    }\n    return currentNode;\n  };\n  const getLastNode = () => {\n    let lastNode = getNavigableChildrenIds(null).pop();\n    while (isExpanded(lastNode)) {\n      lastNode = getNavigableChildrenIds(lastNode).pop();\n    }\n    return lastNode;\n  };\n  const getFirstNode = () => getNavigableChildrenIds(null)[0];\n  const getParent = id => nodeMap.current[id].parentId;\n\n  /**\n   * This is used to determine the start and end of a selection range so\n   * we can get the nodes between the two border nodes.\n   *\n   * It finds the nodes' common ancestor using\n   * a naive implementation of a lowest common ancestor algorithm\n   * (https://en.wikipedia.org/wiki/Lowest_common_ancestor).\n   * Then compares the ancestor's 2 children that are ancestors of nodeA and NodeB\n   * so we can compare their indexes to work out which node comes first in a depth first search.\n   * (https://en.wikipedia.org/wiki/Depth-first_search)\n   *\n   * Another way to put it is which node is shallower in a trÃ©maux tree\n   * https://en.wikipedia.org/wiki/Tr%C3%A9maux_tree\n   */\n  const findOrderInTremauxTree = (nodeAId, nodeBId) => {\n    if (nodeAId === nodeBId) {\n      return [nodeAId, nodeBId];\n    }\n    const nodeA = nodeMap.current[nodeAId];\n    const nodeB = nodeMap.current[nodeBId];\n    if (nodeA.parentId === nodeB.id || nodeB.parentId === nodeA.id) {\n      return nodeB.parentId === nodeA.id ? [nodeA.id, nodeB.id] : [nodeB.id, nodeA.id];\n    }\n    const aFamily = [nodeA.id];\n    const bFamily = [nodeB.id];\n    let aAncestor = nodeA.parentId;\n    let bAncestor = nodeB.parentId;\n    let aAncestorIsCommon = bFamily.indexOf(aAncestor) !== -1;\n    let bAncestorIsCommon = aFamily.indexOf(bAncestor) !== -1;\n    let continueA = true;\n    let continueB = true;\n    while (!bAncestorIsCommon && !aAncestorIsCommon) {\n      if (continueA) {\n        aFamily.push(aAncestor);\n        aAncestorIsCommon = bFamily.indexOf(aAncestor) !== -1;\n        continueA = aAncestor !== null;\n        if (!aAncestorIsCommon && continueA) {\n          aAncestor = nodeMap.current[aAncestor].parentId;\n        }\n      }\n      if (continueB && !aAncestorIsCommon) {\n        bFamily.push(bAncestor);\n        bAncestorIsCommon = aFamily.indexOf(bAncestor) !== -1;\n        continueB = bAncestor !== null;\n        if (!bAncestorIsCommon && continueB) {\n          bAncestor = nodeMap.current[bAncestor].parentId;\n        }\n      }\n    }\n    const commonAncestor = aAncestorIsCommon ? aAncestor : bAncestor;\n    const ancestorFamily = getChildrenIds(commonAncestor);\n    const aSide = aFamily[aFamily.indexOf(commonAncestor) - 1];\n    const bSide = bFamily[bFamily.indexOf(commonAncestor) - 1];\n    return ancestorFamily.indexOf(aSide) < ancestorFamily.indexOf(bSide) ? [nodeAId, nodeBId] : [nodeBId, nodeAId];\n  };\n  const getNodesInRange = (nodeA, nodeB) => {\n    const [first, last] = findOrderInTremauxTree(nodeA, nodeB);\n    const nodes = [first];\n    let current = first;\n    while (current !== last) {\n      current = getNextNode(current);\n      nodes.push(current);\n    }\n    return nodes;\n  };\n\n  /*\n   * Focus Helpers\n   */\n\n  const focus = (event, id) => {\n    if (id) {\n      setFocusedNodeId(id);\n      if (onNodeFocus) {\n        onNodeFocus(event, id);\n      }\n    }\n  };\n  const focusNextNode = (event, id) => focus(event, getNextNode(id));\n  const focusPreviousNode = (event, id) => focus(event, getPreviousNode(id));\n  const focusFirstNode = event => focus(event, getFirstNode());\n  const focusLastNode = event => focus(event, getLastNode());\n  const focusByFirstCharacter = (event, id, char) => {\n    let start;\n    let index;\n    const lowercaseChar = char.toLowerCase();\n    const firstCharIds = [];\n    const firstChars = [];\n    // This really only works since the ids are strings\n    Object.keys(firstCharMap.current).forEach(nodeId => {\n      const firstChar = firstCharMap.current[nodeId];\n      const map = nodeMap.current[nodeId];\n      const visible = map.parentId ? isExpanded(map.parentId) : true;\n      const shouldBeSkipped = disabledItemsFocusable ? false : isDisabled(nodeId);\n      if (visible && !shouldBeSkipped) {\n        firstCharIds.push(nodeId);\n        firstChars.push(firstChar);\n      }\n    });\n\n    // Get start index for search based on position of currentItem\n    start = firstCharIds.indexOf(id) + 1;\n    if (start >= firstCharIds.length) {\n      start = 0;\n    }\n\n    // Check remaining slots in the menu\n    index = findNextFirstChar(firstChars, start, lowercaseChar);\n\n    // If not found in remaining slots, check from beginning\n    if (index === -1) {\n      index = findNextFirstChar(firstChars, 0, lowercaseChar);\n    }\n\n    // If match was found...\n    if (index > -1) {\n      focus(event, firstCharIds[index]);\n    }\n  };\n\n  /*\n   * Expansion Helpers\n   */\n\n  const toggleExpansion = (event, value = focusedNodeId) => {\n    let newExpanded;\n    if (expanded.indexOf(value) !== -1) {\n      newExpanded = expanded.filter(id => id !== value);\n    } else {\n      newExpanded = [value].concat(expanded);\n    }\n    if (onNodeToggle) {\n      onNodeToggle(event, newExpanded);\n    }\n    setExpandedState(newExpanded);\n  };\n  const expandAllSiblings = (event, id) => {\n    const map = nodeMap.current[id];\n    const siblings = getChildrenIds(map.parentId);\n    const diff = siblings.filter(child => isExpandable(child) && !isExpanded(child));\n    const newExpanded = expanded.concat(diff);\n    if (diff.length > 0) {\n      setExpandedState(newExpanded);\n      if (onNodeToggle) {\n        onNodeToggle(event, newExpanded);\n      }\n    }\n  };\n\n  /*\n   * Selection Helpers\n   */\n\n  const lastSelectedNode = React.useRef(null);\n  const lastSelectionWasRange = React.useRef(false);\n  const currentRangeSelection = React.useRef([]);\n  const handleRangeArrowSelect = (event, nodes) => {\n    let base = selected.slice();\n    const {\n      start,\n      next,\n      current\n    } = nodes;\n    if (!next || !current) {\n      return;\n    }\n    if (currentRangeSelection.current.indexOf(current) === -1) {\n      currentRangeSelection.current = [];\n    }\n    if (lastSelectionWasRange.current) {\n      if (currentRangeSelection.current.indexOf(next) !== -1) {\n        base = base.filter(id => id === start || id !== current);\n        currentRangeSelection.current = currentRangeSelection.current.filter(id => id === start || id !== current);\n      } else {\n        base.push(next);\n        currentRangeSelection.current.push(next);\n      }\n    } else {\n      base.push(next);\n      currentRangeSelection.current.push(current, next);\n    }\n    if (onNodeSelect) {\n      onNodeSelect(event, base);\n    }\n    setSelectedState(base);\n  };\n  const handleRangeSelect = (event, nodes) => {\n    let base = selected.slice();\n    const {\n      start,\n      end\n    } = nodes;\n    // If last selection was a range selection ignore nodes that were selected.\n    if (lastSelectionWasRange.current) {\n      base = base.filter(id => currentRangeSelection.current.indexOf(id) === -1);\n    }\n    let range = getNodesInRange(start, end);\n    range = range.filter(node => !isDisabled(node));\n    currentRangeSelection.current = range;\n    let newSelected = base.concat(range);\n    newSelected = newSelected.filter((id, i) => newSelected.indexOf(id) === i);\n    if (onNodeSelect) {\n      onNodeSelect(event, newSelected);\n    }\n    setSelectedState(newSelected);\n  };\n  const handleMultipleSelect = (event, value) => {\n    let newSelected;\n    if (selected.indexOf(value) !== -1) {\n      newSelected = selected.filter(id => id !== value);\n    } else {\n      newSelected = [value].concat(selected);\n    }\n    if (onNodeSelect) {\n      onNodeSelect(event, newSelected);\n    }\n    setSelectedState(newSelected);\n  };\n  const handleSingleSelect = (event, value) => {\n    const newSelected = multiSelect ? [value] : value;\n    if (onNodeSelect) {\n      onNodeSelect(event, newSelected);\n    }\n    setSelectedState(newSelected);\n  };\n  const selectNode = (event, id, multiple = false) => {\n    if (id) {\n      if (multiple) {\n        handleMultipleSelect(event, id);\n      } else {\n        handleSingleSelect(event, id);\n      }\n      lastSelectedNode.current = id;\n      lastSelectionWasRange.current = false;\n      currentRangeSelection.current = [];\n      return true;\n    }\n    return false;\n  };\n  const selectRange = (event, nodes, stacked = false) => {\n    const {\n      start = lastSelectedNode.current,\n      end,\n      current\n    } = nodes;\n    if (stacked) {\n      handleRangeArrowSelect(event, {\n        start,\n        next: end,\n        current\n      });\n    } else if (start != null && end != null) {\n      handleRangeSelect(event, {\n        start,\n        end\n      });\n    }\n    lastSelectionWasRange.current = true;\n  };\n  const rangeSelectToFirst = (event, id) => {\n    if (!lastSelectedNode.current) {\n      lastSelectedNode.current = id;\n    }\n    const start = lastSelectionWasRange.current ? lastSelectedNode.current : id;\n    selectRange(event, {\n      start,\n      end: getFirstNode()\n    });\n  };\n  const rangeSelectToLast = (event, id) => {\n    if (!lastSelectedNode.current) {\n      lastSelectedNode.current = id;\n    }\n    const start = lastSelectionWasRange.current ? lastSelectedNode.current : id;\n    selectRange(event, {\n      start,\n      end: getLastNode()\n    });\n  };\n  const selectNextNode = (event, id) => {\n    if (!isDisabled(getNextNode(id))) {\n      selectRange(event, {\n        end: getNextNode(id),\n        current: id\n      }, true);\n    }\n  };\n  const selectPreviousNode = (event, id) => {\n    if (!isDisabled(getPreviousNode(id))) {\n      selectRange(event, {\n        end: getPreviousNode(id),\n        current: id\n      }, true);\n    }\n  };\n  const selectAllNodes = event => {\n    selectRange(event, {\n      start: getFirstNode(),\n      end: getLastNode()\n    });\n  };\n\n  /*\n   * Mapping Helpers\n   */\n  const registerNode = React.useCallback(node => {\n    const {\n      id,\n      index,\n      parentId,\n      expandable,\n      idAttribute,\n      disabled\n    } = node;\n    nodeMap.current[id] = {\n      id,\n      index,\n      parentId,\n      expandable,\n      idAttribute,\n      disabled\n    };\n  }, []);\n  const unregisterNode = React.useCallback(id => {\n    const newMap = _extends({}, nodeMap.current);\n    delete newMap[id];\n    nodeMap.current = newMap;\n    setFocusedNodeId(oldFocusedNodeId => {\n      if (oldFocusedNodeId === id && treeRef.current === ownerDocument(treeRef.current).activeElement) {\n        return getChildrenIds(null)[0];\n      }\n      return oldFocusedNodeId;\n    });\n  }, []);\n  const mapFirstChar = React.useCallback((id, firstChar) => {\n    firstCharMap.current[id] = firstChar;\n  }, []);\n  const unMapFirstChar = React.useCallback(id => {\n    const newMap = _extends({}, firstCharMap.current);\n    delete newMap[id];\n    firstCharMap.current = newMap;\n  }, []);\n\n  /**\n   * Event handlers and Navigation\n   */\n\n  const handleNextArrow = event => {\n    if (isExpandable(focusedNodeId)) {\n      if (isExpanded(focusedNodeId)) {\n        focusNextNode(event, focusedNodeId);\n      } else if (!isDisabled(focusedNodeId)) {\n        toggleExpansion(event);\n      }\n    }\n    return true;\n  };\n  const handlePreviousArrow = event => {\n    if (isExpanded(focusedNodeId) && !isDisabled(focusedNodeId)) {\n      toggleExpansion(event, focusedNodeId);\n      return true;\n    }\n    const parent = getParent(focusedNodeId);\n    if (parent) {\n      focus(event, parent);\n      return true;\n    }\n    return false;\n  };\n  const handleKeyDown = event => {\n    let flag = false;\n    const key = event.key;\n\n    // If the tree is empty there will be no focused node\n    if (event.altKey || event.currentTarget !== event.target || !focusedNodeId) {\n      return;\n    }\n    const ctrlPressed = event.ctrlKey || event.metaKey;\n    switch (key) {\n      case ' ':\n        if (!disableSelection && !isDisabled(focusedNodeId)) {\n          if (multiSelect && event.shiftKey) {\n            selectRange(event, {\n              end: focusedNodeId\n            });\n            flag = true;\n          } else if (multiSelect) {\n            flag = selectNode(event, focusedNodeId, true);\n          } else {\n            flag = selectNode(event, focusedNodeId);\n          }\n        }\n        event.stopPropagation();\n        break;\n      case 'Enter':\n        if (!isDisabled(focusedNodeId)) {\n          if (isExpandable(focusedNodeId)) {\n            toggleExpansion(event);\n            flag = true;\n          } else if (multiSelect) {\n            flag = selectNode(event, focusedNodeId, true);\n          } else {\n            flag = selectNode(event, focusedNodeId);\n          }\n        }\n        event.stopPropagation();\n        break;\n      case 'ArrowDown':\n        if (multiSelect && event.shiftKey && !disableSelection) {\n          selectNextNode(event, focusedNodeId);\n        }\n        focusNextNode(event, focusedNodeId);\n        flag = true;\n        break;\n      case 'ArrowUp':\n        if (multiSelect && event.shiftKey && !disableSelection) {\n          selectPreviousNode(event, focusedNodeId);\n        }\n        focusPreviousNode(event, focusedNodeId);\n        flag = true;\n        break;\n      case 'ArrowRight':\n        if (isRtl) {\n          flag = handlePreviousArrow(event);\n        } else {\n          flag = handleNextArrow(event);\n        }\n        break;\n      case 'ArrowLeft':\n        if (isRtl) {\n          flag = handleNextArrow(event);\n        } else {\n          flag = handlePreviousArrow(event);\n        }\n        break;\n      case 'Home':\n        if (multiSelect && ctrlPressed && event.shiftKey && !disableSelection && !isDisabled(focusedNodeId)) {\n          rangeSelectToFirst(event, focusedNodeId);\n        }\n        focusFirstNode(event);\n        flag = true;\n        break;\n      case 'End':\n        if (multiSelect && ctrlPressed && event.shiftKey && !disableSelection && !isDisabled(focusedNodeId)) {\n          rangeSelectToLast(event, focusedNodeId);\n        }\n        focusLastNode(event);\n        flag = true;\n        break;\n      default:\n        if (key === '*') {\n          expandAllSiblings(event, focusedNodeId);\n          flag = true;\n        } else if (multiSelect && ctrlPressed && key.toLowerCase() === 'a' && !disableSelection) {\n          selectAllNodes(event);\n          flag = true;\n        } else if (!ctrlPressed && !event.shiftKey && isPrintableCharacter(key)) {\n          focusByFirstCharacter(event, focusedNodeId, key);\n          flag = true;\n        }\n    }\n    if (flag) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n    if (onKeyDown) {\n      onKeyDown(event);\n    }\n  };\n  const handleFocus = event => {\n    // if the event bubbled (which is React specific) we don't want to steal focus\n    if (event.target === event.currentTarget) {\n      const firstSelected = Array.isArray(selected) ? selected[0] : selected;\n      focus(event, firstSelected || getNavigableChildrenIds(null)[0]);\n    }\n    if (onFocus) {\n      onFocus(event);\n    }\n  };\n  const handleBlur = event => {\n    setFocusedNodeId(null);\n    if (onBlur) {\n      onBlur(event);\n    }\n  };\n  const activeDescendant = nodeMap.current[focusedNodeId] ? nodeMap.current[focusedNodeId].idAttribute : null;\n  return /*#__PURE__*/_jsx(TreeViewContext.Provider, {\n    // TODO: fix this lint error\n    // eslint-disable-next-line react/jsx-no-constructed-context-values\n    value: {\n      icons: {\n        defaultCollapseIcon,\n        defaultExpandIcon,\n        defaultParentIcon,\n        defaultEndIcon\n      },\n      focus,\n      toggleExpansion,\n      isExpanded,\n      isExpandable,\n      isFocused,\n      isSelected,\n      isDisabled,\n      selectNode: disableSelection ? noopSelection : selectNode,\n      selectRange: disableSelection ? noopSelection : selectRange,\n      multiSelect,\n      disabledItemsFocusable,\n      mapFirstChar,\n      unMapFirstChar,\n      registerNode,\n      unregisterNode,\n      treeId\n    },\n    children: /*#__PURE__*/_jsx(DescendantProvider, {\n      children: /*#__PURE__*/_jsx(TreeViewRoot, _extends({\n        role: \"tree\",\n        id: treeId,\n        \"aria-activedescendant\": activeDescendant,\n        \"aria-multiselectable\": multiSelect,\n        className: clsx(classes.root, className),\n        ref: handleRef,\n        tabIndex: 0,\n        onKeyDown: handleKeyDown,\n        onFocus: handleFocus,\n        onBlur: handleBlur,\n        ownerState: ownerState\n      }, other, {\n        children: children\n      }))\n    })\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? TreeView.propTypes /* remove-proptypes */ = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The default icon used to collapse the node.\n   */\n  defaultCollapseIcon: PropTypes.node,\n  /**\n   * The default icon displayed next to a end node. This is applied to all\n   * tree nodes and can be overridden by the TreeItem `icon` prop.\n   */\n  defaultEndIcon: PropTypes.node,\n  /**\n   * Expanded node ids. (Uncontrolled)\n   * @default []\n   */\n  defaultExpanded: PropTypes.arrayOf(PropTypes.string),\n  /**\n   * The default icon used to expand the node.\n   */\n  defaultExpandIcon: PropTypes.node,\n  /**\n   * The default icon displayed next to a parent node. This is applied to all\n   * parent nodes and can be overridden by the TreeItem `icon` prop.\n   */\n  defaultParentIcon: PropTypes.node,\n  /**\n   * Selected node ids. (Uncontrolled)\n   * When `multiSelect` is true this takes an array of strings; when false (default) a string.\n   * @default []\n   */\n  defaultSelected: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.string), PropTypes.string]),\n  /**\n   * If `true`, will allow focus on disabled items.\n   * @default false\n   */\n  disabledItemsFocusable: PropTypes.bool,\n  /**\n   * If `true` selection is disabled.\n   * @default false\n   */\n  disableSelection: PropTypes.bool,\n  /**\n   * Expanded node ids. (Controlled)\n   */\n  expanded: PropTypes.arrayOf(PropTypes.string),\n  /**\n   * This prop is used to help implement the accessibility logic.\n   * If you don't provide this prop. It falls back to a randomly generated id.\n   */\n  id: PropTypes.string,\n  /**\n   * If true `ctrl` and `shift` will trigger multiselect.\n   * @default false\n   */\n  multiSelect: PropTypes.bool,\n  /**\n   * @ignore\n   */\n  onBlur: PropTypes.func,\n  /**\n   * @ignore\n   */\n  onFocus: PropTypes.func,\n  /**\n   * @ignore\n   */\n  onKeyDown: PropTypes.func,\n  /**\n   * Callback fired when tree items are focused.\n   *\n   * @param {React.SyntheticEvent} event The event source of the callback **Warning**: This is a generic event not a focus event.\n   * @param {string} value of the focused node.\n   */\n  onNodeFocus: PropTypes.func,\n  /**\n   * Callback fired when tree items are selected/unselected.\n   *\n   * @param {React.SyntheticEvent} event The event source of the callback\n   * @param {string[] | string} nodeIds Ids of the selected nodes. When `multiSelect` is true\n   * this is an array of strings; when false (default) a string.\n   */\n  onNodeSelect: PropTypes.func,\n  /**\n   * Callback fired when tree items are expanded/collapsed.\n   *\n   * @param {React.SyntheticEvent} event The event source of the callback.\n   * @param {array} nodeIds The ids of the expanded nodes.\n   */\n  onNodeToggle: PropTypes.func,\n  /**\n   * Selected node ids. (Controlled)\n   * When `multiSelect` is true this takes an array of strings; when false (default) a string.\n   */\n  selected: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.string), PropTypes.string]),\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])\n} : void 0;\nexport default TreeView;"],"mappings":"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"},"metadata":{},"sourceType":"module"}